1. Single-threaded Server – accepts one client at a time.
Total time for 1000requests: 1048 ms
Average time per request: 1.048 ms

2. Multi-threaded Server with a Fixed Thread Pool of Size 2 – handles up to 2 clients concurrently.
Total time for 1000requests: 1029 ms
Average time per request: 1.029 ms

3. Multi-threaded Server with a Fixed Thread Pool of Size 10 – handles up to 10 clients concurrently.
Total time for 1000requests: 1018 ms
Average time per request: 1.018 ms


Final Conclusion-----------

For small, quick request-response tasks, there is only a minimal difference in performance between the configurations.
This suggests that a single-threaded or small-thread pool model can still be effective for lightweight, low-latency tasks.

For higher loads or tasks requiring concurrent connections, using a larger thread pool (like size 10) improves throughput
by reducing the average time per request and allowing more clients to connect simultaneously.

Scalability and Efficiency: Multi-threaded servers, especially with a larger thread pool, are better suited for scenarios
 with many concurrent client requests, as they handle connections more efficiently and reduce waiting times.